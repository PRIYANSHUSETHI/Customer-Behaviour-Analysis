# -*- coding: utf-8 -*-
"""Customer Behavious analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BkymBPJa4s2EDl1RDpl4GRc25BjSfy3E

**Customer Behavior Analysis is a powerful tool that enables businesses to make informed, data-driven decisions, improve customer experiences, and stay ahead in an ever-evolving market.**

Now this can be broken down into 5 steps as follows:

**Step 1: Collect Customer Interaction Data:**

Gather data from various sources such as purchase history, website visits, social media engagement, customer feedback, and other relevant interactions.

**Step 2: Clean and Prepare the Data:**

Identify and correct data inconsistencies, handle missing values, and remove or address outliers to ensure the dataset is accurate and reliable.

**Step 3: Perform Descriptive Analysis:**

Calculate basic statistical measures like mean, median, and standard deviation to summarize and understand the core characteristics of the data.

**Step 4: Visualize the Data:**

Create visualizations—including histograms, scatter plots, and bar charts—to explore patterns, spot trends, and identify anomalies in customer behavior.

**Step 5: Segment Customers Using Clustering:**

Use clustering techniques to group customers based on similar behaviors or attributes, enabling more targeted analysis and decision-making.
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
data = pd.read_csv('ecommerce_customer_data.csv')
print(data.head())

# summary stats for numeric columns
numeric_summary = data.describe()
print(numeric_summary)

#summary for non-numeric coloumns
categorical_summary = data.describe(include = 'object')
print(categorical_summary)

"""LET US VISUALIZE THE DISTRIBUTION OF AGE IN OUR DATASET"""

fig = px.histogram(data, x = 'Age', title = 'Distribution of Age')
fig.show()

# BAR CHARTS FOR GENDER
gender_counts = data['Gender'].value_counts().reset_index()
gender_counts.columns = ['Gender','Count']
fig = px.bar(gender_counts, x = 'Gender', y= 'Count', title= 'Gender Distribution')
fig.show()

"""**ANALYSING CUSTOMER BEHAVIOUR**"""

# PRODUCT BROWSING TIME VS TOTAL PAGES VIEWED
fig = px.scatter(data, x='Product_Browsing_Time', y='Total_Pages_Viewed', title='Product Browsing Time vs Total Pages Viewed', trendline = 'ols')
fig.show()

"""The scatter plot above reveals no clear pattern or strong correlation between the time spent browsing products and the total number of pages viewed. This suggests that users who spend more time on the website aren't necessarily viewing more pages. The lack of association could be influenced by factors such as website design, content relevance, or individual user behavior and preferences."""

# analysing pages viewed by the gender
gender_grouped = data.groupby('Gender')['Total_Pages_Viewed'].mean().reset_index()
fig = px.bar(gender_grouped, x = 'Gender', y= 'Total_Pages_Viewed',title = 'Average Pages Viewed by Gender')
fig.show()

# let us try to get an idea of which devices are used the most for visiting websites
devices_grouped = data.groupby('Device_Type')['Total_Pages_Viewed'].mean().reset_index()
devices_grouped.columns = ['Device_Type','Average_Pages_Viewed']
fig = px.bar(devices_grouped, x = 'Device_Type', y='Average_Pages_Viewed', title = 'Average Pages Viewed by Device')
fig.show()

"""Now, let’s calculate the customer lifetime value and visualize segments based on the customer lifetime value"""

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Select behavioral features
features = ['Total_Purchases', 'Items_Added_to_Cart', 'Product_Browsing_Time']
X = data[features]

# Standardize
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply PCA
pca = PCA(n_components=1)
pca.fit(X_scaled)

# Get feature contributions
weights = pca.components_[0]

CLV = weights[0]*data['Total_Purchases'] + weights[1]*data['Items_Added_to_Cart'] + weights[2]*data['Product_Browsing_Time']

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns


features = ['Total_Purchases', 'Items_Added_to_Cart', 'Product_Browsing_Time']
X = data[features]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


# Apply PCA
pca = PCA(n_components=1)
pca.fit(X_scaled)
weights = pca.components_[0]

# Create CLV Score using PCA weights
data['CLV_Score'] = X_scaled @ weights

# Segment into CLV tiers

data['CLV_Tier'] = pd.qcut(data['CLV_Score'], q=4, labels=['Low', 'Medium', 'High', 'Very High'])


# Visualize CLV Score Distribution

plt.figure(figsize=(8, 5))
sns.histplot(data['CLV_Score'], kde=True, bins=30, color='skyblue')
plt.title('Distribution of CLV Scores')
plt.xlabel('CLV Score')
plt.ylabel('Count')
plt.grid(True)
plt.show()


# Boxplot of CLV Score by CLV Tier

plt.figure(figsize=(8, 5))
sns.boxplot(x='CLV_Tier', y='CLV_Score', data=data, palette='coolwarm')
plt.title('CLV Score by CLV Tier')
plt.grid(True)
plt.show()

# CLV Score vs Top Features
for feature in features:
    plt.figure(figsize=(8, 5))
    sns.scatterplot(data=data, x=feature, y='CLV_Score', hue='CLV_Tier', palette='viridis')
    plt.title(f'CLV Score vs {feature}')
    plt.grid(True)
    plt.show()

# Average feature values by CLV Tier
summary = data.groupby('CLV_Tier')[features + ['CLV_Score']].mean().round(2)
print("\nAverage Feature Values by CLV Tier:\n")
print(summary)

import matplotlib.pyplot as plt
import seaborn as sns

# Defining funnel stages

funnel = {
    'Visitors': data[data['Total_Pages_Viewed'] > 0].shape[0],
    'Browsers': data[data['Product_Browsing_Time'] > 0].shape[0],
    'Cart Adders': data[data['Items_Added_to_Cart'] > 0].shape[0],
    'Purchasers': data[data['Total_Purchases'] > 0].shape[0]
}

funnel_df = pd.DataFrame.from_dict(funnel, orient='index', columns=['Users']).reset_index()
funnel_df.rename(columns={'index': 'Stage'}, inplace=True)

# Plotly Funnel Chart
fig = px.funnel(
    funnel_df,
    x='Users',
    y='Stage',
    title='Customer Conversion Funnel',
    color='Stage',
    color_discrete_sequence=px.colors.sequential.Plasma_r
)

# Beautify layout
fig.update_layout(
    title_font_size=20,
    title_font_family="Arial",
    plot_bgcolor='white',
    font=dict(size=14),
    margin=dict(t=60, l=40, r=40, b=40)
)

fig.show()

"""**Analysing Churn Rate**"""

# Calculate churn rate
data['Churned'] = data['Total_Purchases'] == 0

churn_rate = data['Churned'].mean()
print(churn_rate)

# Mark churned users (Total_Purchases == 0)
data['Churned'] = data['Total_Purchases'] == 0

# Churn Rate by Gender
churn_by_gender = data.groupby('Gender').agg(
    Total_Users=('User_ID', 'nunique'),
    Churned_Users=('Churned', 'sum')
).reset_index()

churn_by_gender['Churn_Rate (%)'] = (churn_by_gender['Churned_Users'] / churn_by_gender['Total_Users']) * 100
print("\n Churn Rate by Gender:")
print(churn_by_gender.sort_values('Churn_Rate (%)', ascending=False))

# Churn Rate by Device_Type
churn_by_device = data.groupby('Device_Type').agg(
    Total_Users=('User_ID', 'nunique'),
    Churned_Users=('Churned', 'sum')
).reset_index()

churn_by_device['Churn_Rate (%)'] = (churn_by_device['Churned_Users'] / churn_by_device['Total_Users']) * 100
print("\n Churn Rate by Device Type:")
print(churn_by_device.sort_values('Churn_Rate (%)', ascending=False))

# Churn Rate by Location
churn_by_location = data.groupby('Location').agg(
    Total_Users=('User_ID', 'nunique'),
    Churned_Users=('Churned', 'sum')
).reset_index()

churn_by_location['Churn_Rate (%)'] = (churn_by_location['Churned_Users'] / churn_by_location['Total_Users']) * 100
print("\n Churn Rate by Location:")
print(churn_by_location.sort_values('Churn_Rate (%)', ascending=False))

import seaborn as sns
import matplotlib.pyplot as plt

sns.set(style="whitegrid")

# Churn Rate by Gender
plt.figure(figsize=(6, 4))
sns.barplot(data=churn_by_gender, x='Gender', y='Churn_Rate (%)', palette='Blues_d')
plt.title('Churn Rate by Gender', fontsize=14, fontweight='bold')
plt.ylim(0, 100)
plt.ylabel('Churn Rate (%)')
plt.xlabel('Gender')
plt.tight_layout()
plt.show()

# Churn Rate by Device Type
plt.figure(figsize=(6, 4))
sns.barplot(data=churn_by_device, x='Device_Type', y='Churn_Rate (%)', palette='Oranges_d')
plt.title('Churn Rate by Device Type', fontsize=14, fontweight='bold')
plt.ylim(0, 100)
plt.ylabel('Churn Rate (%)')
plt.xlabel('Device Type')
plt.tight_layout()
plt.show()

# Churn Rate by Location
plt.figure(figsize=(8, 4))
sns.barplot(data=churn_by_location, x='Location', y='Churn_Rate (%)', palette='Greens_d')
plt.title('Churn Rate by Location', fontsize=14, fontweight='bold')
plt.ylim(0, 100)
plt.ylabel('Churn Rate (%)')
plt.xlabel('Location')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()